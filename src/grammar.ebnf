program         = { statement } ;

statement       = variable_decl | assignment | function_decl | if_stmt | while_stmt | for_stmt | break_stmt | return_stmt | expr_stmt ;

variable_decl   = identifier [ ":" type ] "=" expr ";" ;
assignment      = identifier "=" expr ";" ;
function_decl   = "fn" identifier "(" [ parameters ] ")" [ ":" type ] block ;
if_stmt         = "if" "(" expr ")" block { "elif" "(" expr ")" block } [ "else" block ] ;
while_stmt      = "while" "(" expr ")" block ;
for_stmt       = "for" "(" for_init ";" expr ";" for_step ")" block ;
for_init       = variable_decl_no_semi | assignment_no_semi ;
for_step       = assignment_no_semi ;
variable_decl_no_semi = identifier [ ":" type ] "=" expr ;
assignment_no_semi    = identifier "=" expr ;
break_stmt      = "break" ";" ;
return_stmt     = "return" expr ";" ;
expr_stmt       = expr ";" ;

block           = "{" { statement } "}" ;
parameters      = parameter { "," parameter } ;
parameter       = identifier [ ":" type ] ;

type            = "int" | "float" | "bool" | "str" ;

expr            = logic_or ;
logic_or        = logic_and { "or" logic_and } ;
logic_and       = equality { "and" equality } ;
equality        = comparison { ("==" | "!=") comparison } ;
comparison      = term { ("<" | ">" | "<=" | ">=") term } ;
term            = factor { ("+" | "-") factor } ;
factor          = unary { ("*" | "/") unary } ;
unary           = [ "not" | "-" ] primary ;
primary         = int_lit | float_lit | str_lit | bool_lit | identifier | call | "(" expr ")" ;
call            = identifier "(" [ arguments ] ")" ;
arguments       = expr { "," expr } ;

identifier      = /* regex: [a-zA-Z_][a-zA-Z0-9_]* */ ;
int_lit         = /* regex: [0-9]+ */ ;
float_lit       = /* regex: [0-9]+\.[0-9]+ */ ;
str_lit         = /* regex: "([^"\\]|\\.)*" */ ;
bool_lit        = "true" | "false" ; 